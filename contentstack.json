{
  "publish_an_entry": {
    "name": "publish_an_entry",
    "description": "This tool publishes a specified entry from a selected content type to one or more environments and locales within a designated branch of the stack. Content publishing, environments",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries/entry_uid/publish",
      "method": "POST",
      "body": {
        "type": "object",
        "properties": {
          "entry": {
            "type": "object",
            "properties": {
              "environments": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-mapFrom": "environment_uids"
              },
              "locales": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-mapFrom": "locales"
              }
            }
          },
          "locale": {
            "type": "string",
            "x-mapFrom": "master_locale"
          },
          "version": {
            "type": "number",
            "x-mapFrom": "version"
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time",
            "optional": true,
            "x-mapFrom": "scheduled_at"
          }
        }
      },
      "type": "complex",
      "params": {
        "content_type_name": "content_type_name",
        "entry_uid": "entry_uid"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name",
        "entry_uid",
        "environment_uids",
        "locales",
        "master_locale"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "content_type_name": {
          "type": "string",
          "description": "Select a content type to publish the entry.",
          "default": ""
        },
        "entry_uid": {
          "type": "string",
          "description": "Select an entry's uid to publish.",
          "default": ""
        },
        "locales": {
          "type": "string",
          "description": "Select the locale code(s) for publishing. For example, use 'en-us' for English (US) or 'ar' for Arabic. To view all available locale codes, use the get_all_languages tool first."
        },
        "master_locale": {
          "type": "string",
          "description": "Select the master locale in which you want to publish the entry. You can get this locale from the get_single_entry tool. There you can find the locale key. Call the get_single_entry tool to get the master locale."
        },
        "environment_uids": {
          "type": "string",
          "description": "Select the environment(s) in which you want to publish the entry.",
          "default": ""
        },
        "publish_with_reference": {
          "type": "boolean",
          "default": true
        },
        "scheduled_at": {
          "type": "string",
          "description": "Schedule the entry publish in ‘YYYY-MM-DD HH:MM:SS’ format."
        }
      }
    }
  },
  "unpublish_an_entry": {
    "name": "unpublish_an_entry",
    "description": "This tool unpublishes a specified entry from selected environments and locales within a Contentstack stack branch, removing the entry from the CDN and making it inaccessible via delivery APIs. Keywords: unpublish, entry",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries/entry/unpublish",
      "method": "POST",
      "body": {
        "type": "object",
        "properties": {
          "entry": {
            "type": "object",
            "properties": {
              "environments": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-mapFrom": "environment_uids"
              },
              "locales": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-mapFrom": "locales"
              }
            }
          },
          "locale": {
            "type": "string",
            "x-mapFrom": "master_locale"
          },
          "version": {
            "type": "number",
            "x-mapFrom": "version"
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time",
            "optional": true,
            "x-mapFrom": "scheduled_at"
          }
        }
      },
      "type": "complex",
      "params": {
        "content_type_name": "content_type_name",
        "entry": "entry"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name",
        "entry",
        "environment_uids",
        "locales",
        "master_locale"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "content_type_name": {
          "type": "string",
          "description": "Select a content type to unpublish the entry.",
          "default": ""
        },
        "entry": {
          "type": "string",
          "description": "Select an entry to unpublish.",
          "default": ""
        },
        "environment_uids": {
          "type": "string",
          "description": "Select the environment(s) from where you want to unpublish the entry.",
          "default": ""
        },
        "locales": {
          "type": "string",
          "description": "Select the locale code(s) for publishing. For example, use 'en-us' for English (US) or 'ar' for Arabic. To view all available locale codes, use the get_all_languages tool first."
        },
        "master_locale": {
          "type": "string",
          "description": "Select the master locale in which you want to publish the entry. You can get this locale from the get_single_entry tool. There you can find the locale key. Call the get_single_entry tool to get the master locale."
        },
        "scheduled_at": {
          "type": "string",
          "description": "When left blank, the unpublish schedule is set to \"now.\" You may also enter a UTC time in \"YYYY-MM-DD HH:MM:SS\" format."
        }
      }
    }
  },
  "publish_variants_of_an_entry": {
    "name": "publish_variants_of_an_entry",
    "description": "This tool publishes specified entry variants to selected environments and locales within a defined branch, supporting variant group targeting for content type entries. Keywords: publish, variants",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries/entry/publish",
      "method": "POST",
      "body": {
        "type": "object",
        "properties": {
          "entry": {
            "type": "object",
            "properties": {
              "environments": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-mapFrom": "environment_uids"
              },
              "locales": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-mapFrom": "locales"
              },
              "variants": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "uid": {
                      "type": "string",
                      "x-mapFrom": "variant_ids"
                    }
                  }
                }
              },
              "variant_rules": {
                "type": "object",
                "properties": {
                  "publish_latest_base": {
                    "type": "boolean",
                    "x-mapFrom": "publish_latest_base",
                    "default": false
                  },
                  "publish_latest_base_conditionally": {
                    "type": "boolean",
                    "x-mapFrom": "publish_latest_base_conditionally",
                    "default": true
                  }
                }
              }
            }
          },
          "locale": {
            "type": "string",
            "x-mapFrom": "locales"
          }
        }
      },
      "type": "complex",
      "params": {
        "content_type_name": "content_type_name",
        "entry": "entry"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name",
        "entry",
        "environment_uids",
        "locales",
        "variant_ids"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "content_type_name": {
          "type": "string",
          "description": "Select a content type to publish the entry’s variant.",
          "default": ""
        },
        "entry": {
          "type": "string",
          "description": "Select an entry to publish its variant.",
          "default": ""
        },
        "variant_group_uid": {
          "type": "string",
          "description": "Select the Variant Group to publish the variant."
        },
        "variant_ids": {
          "type": "string",
          "description": "Select the variant(s) to publish its content. You can select multiple variants. If variant name is provided then get the variant id by calling the get_all_variants_of_a_content_type tool and then match the variant name with the id."
        },
        "locales": {
          "type": "string",
          "description": "Select the locale code(s) for publishing. For example, use 'en-us' for English (US) or 'ar' for Arabic. To view all available locale codes, use the get_all_languages tool first."
        },
        "environment_uids": {
          "type": "string",
          "description": "Select the environment(s) in which you want to publish the entry’s variant. You can select multiple environments. You can get the environment uid from the get_all_environments tool. There you can find the uid key. Call the get_all_environments tool to get the environment uid.",
          "default": ""
        },
        "scheduled_at": {
          "type": "string",
          "description": "Schedule the publish schedule in ‘YYYY-MM-DD HH:MM:SS’ format."
        },
        "publish_with_reference": {
          "type": "boolean",
          "default": true
        },
        "publish_latest_base": {
          "type": "boolean",
          "default": false
        },
        "publish_latest_base_conditionally": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "create_an_entry": {
    "name": "create_an_entry",
    "description": "This tool creates a new entry in the specified Contentstack stack, targeting a defined content type and branch, with support for locale selection and structured entry data.",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries",
      "method": "POST",
      "body": "entry_data",
      "queryParams": {
        "locale": "locale",
        "include_branch": "include_branch"
      },
      "params": {
        "content_type_name": "content_type_name"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name",
        "entry_data"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "content_type_name": {
          "type": "string",
          "description": "Select a content type to create an entry.",
          "default": ""
        },
        "entry_data": {
          "type": "object",
          "description": "The fields should be wrapped by an entry object {'entry':{...data}}"
        },
        "locale": {
          "type": "string",
          "description": "Select a locale in which you want to create the entry."
        },
        "include_branch": {
          "type": "boolean"
        }
      }
    }
  },
  "delete_an_entry": {
    "name": "delete_an_entry",
    "description": "This tool deletes a specified entry from a Contentstack stack, targeting the provided content type and entry ID, with optional parameters for branch, locale, and deletion of all localized variants.",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries/entry_id",
      "method": "DELETE",
      "queryParams": {
        "delete_all_localized": "delete_all_localized"
      },
      "params": {
        "content_type_name": "content_type_name",
        "entry_id": "entry_id"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name",
        "entry_id"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "content_type_name": {
          "type": "string",
          "description": "Select a content type to delete the entry from the stack.",
          "default": ""
        },
        "entry_id": {
          "type": "string",
          "description": "Select an entry to delete.",
          "default": ""
        },
        "locales": {
          "type": "string",
          "description": "Select the locale(s) to delete the entry in that locale."
        },
        "delete_all_localized": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_all_entries": {
    "name": "get_all_entries",
    "description": "This tool retrieves entry details for a specified content type within a Contentstack stack, supporting branch selection, pagination, versioning, locale filtering, advanced query parameters, and optional inclusion of metadata, workflow, branch, and publish details. Keywords: entry retrieval, content type.",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries",
      "method": "GET",
      "queryParams": {
        "limit": "limit",
        "skip": "skip",
        "include_count": "include_count",
        "include_metadata": "include_metadata",
        "version": "version",
        "locale": "locale",
        "include_workflow": "include_workflow",
        "include_publish_details": "include_publish_details",
        "include_branch": "include_branch"
      },
      "params": {
        "content_type_name": "content_type_name"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "content_type_name": {
          "type": "string",
          "description": "Configure this option to fetch entries of a particular content type.",
          "default": ""
        },
        "limit": {
          "type": "string",
          "description": "Specify the number of entries to retrieve from the stack. For example, if you set the limit to 10, then 10 entries will be fetched. The maximum limit is 100."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of entries to skip. For example, if you set the skip value to 3, the first three entries will be skipped and the results will start with the fourth item."
        },
        "version": {
          "type": "string",
          "description": "Specify the version to fetch the entries saved in that version."
        },
        "locale": {
          "type": "string",
          "description": "Specify the locale to fetch the localized entries."
        },
        "query": {
          "type": "array",
          "description": "Enter your data in key-value pairs to retrieve entries fulfilling the query specification."
        },
        "include": {
          "type": "array",
          "description": "Enter the value of the referenced entries within your entry data"
        },
        "include_count": {
          "type": "boolean",
          "default": false
        },
        "include_metadata": {
          "type": "boolean",
          "default": false
        },
        "include_workflow": {
          "type": "boolean"
        },
        "include_branch": {
          "type": "boolean"
        },
        "include_publish_details": {
          "type": "boolean"
        }
      }
    }
  },
  "get_single_entry": {
    "name": "get_single_entry",
    "description": "This tool retrieves metadata and field values for a specified entry within a given content type, supporting branch, version, and locale selection, with optional inclusion of workflow, branch, and publish details. Keywords: entry retrieval, metadata.",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries/entry_id",
      "method": "GET",
      "queryParams": {
        "version": "version",
        "locale": "locale",
        "include_workflow": "include_workflow",
        "include_publish_details": "include_publish_details",
        "include_branch": "include_branch"
      },
      "params": {
        "content_type_name": "content_type_name",
        "entry_id": "entry_id"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name",
        "entry_id"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "content_type_name": {
          "type": "string",
          "description": "Select a content type to fetch the entry details.",
          "default": ""
        },
        "entry_id": {
          "type": "string",
          "description": "Select an entry to fetch its details.",
          "default": ""
        },
        "version": {
          "type": "string",
          "description": "Select the entry version."
        },
        "locale": {
          "type": "string",
          "description": "Select a locale to fetch the entry details in that locale."
        },
        "include_workflow": {
          "type": "boolean"
        },
        "include_branch": {
          "type": "boolean"
        },
        "include_publish_details": {
          "type": "boolean"
        }
      }
    }
  },
  "update_an_entry": {
    "name": "update_an_entry",
    "description": "This tool updates an existing entry in a specified Contentstack stack, branch, and locale by modifying its field data according to the provided content type and entry identifier. Keywords: entry update, content type.",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries/entry_id",
      "method": "PUT",
      "body": "entry_data",
      "queryParams": {
        "locale": "locale",
        "include_branch": "include_branch"
      },
      "params": {
        "content_type_name": "content_type_name",
        "entry_id": "entry_id"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name",
        "entry_id",
        "entry_data"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "content_type_name": {
          "type": "string",
          "description": "Select a content type to update the entry.",
          "default": ""
        },
        "entry_id": {
          "type": "string",
          "description": "Select an entry to update.",
          "default": ""
        },
        "entry_data": {
          "type": "object",
          "description": "The fields should be wrapped by an entry object {'entry':{...data}}"
        },
        "locale": {
          "type": "string",
          "description": "Select a locale in which the entry should be updated."
        },
        "include_branch": {
          "type": "boolean"
        }
      }
    }
  },
  "get_all_content_types": {
    "name": "get_all_content_types",
    "description": "This tool retrieves the schema and metadata of a specified content type from a Contentstack stack, supporting branch selection, query filtering, pagination, and optional inclusion of global field schema and branch metadata.",
    "mapper": {
      "apiUrl": "/v3/content_types",
      "method": "GET",
      "queryParams": {
        "limit": "limit",
        "skip": "skip",
        "include_count": "include_count",
        "include_branch": "include_branch",
        "include_global_field_schema": "include_global_field_schema"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "branch"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "query": {
          "type": "array",
          "description": "Enter your data in key-value pairs to retrieve entries fulfilling the query specification."
        },
        "limit": {
          "type": "string",
          "description": "Specify the number of content types to fetch from the stack. For example, if you set the limit to 10, then 10 content types will be fetched."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of content types to skip. For example, if you set the skip value to 3, the first three content types will be skipped."
        },
        "include_count": {
          "type": "boolean",
          "default": true
        },
        "include_branch": {
          "type": "boolean",
          "default": true
        },
        "include_global_field_schema": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_a_single_content_type": {
    "name": "get_a_single_content_type",
    "description": "This tool retrieves the schema and configuration details of a specified content type within a stack, supporting optional inclusion of global field definitions and branch metadata for developer reference.",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name",
      "method": "GET",
      "queryParams": {
        "include_branch": "include_branch",
        "include_global_field_schema": "include_global_field_schema"
      },
      "params": {
        "content_type_name": "content_type_name"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "content_type_name": {
          "type": "string",
          "description": "Select a content type to fetch its details.",
          "default": ""
        },
        "include_global_field_schema": {
          "type": "boolean",
          "default": true
        },
        "include_branch": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_all_taxonomies": {
    "name": "get_all_taxonomies",
    "description": "This tool retrieves metadata for all taxonomies within a specified stack, supporting pagination via limit and skip parameters, and enabling filtered search by UID or name. Keywords: taxonomy, pagination",
    "mapper": {
      "apiUrl": "/v3/taxonomies",
      "method": "GET",
      "queryParams": {
        "limit": "limit",
        "skip": "skip",
        "include_count": "include_count",
        "include_terms_count": "include_terms_count",
        "include_referenced_terms_count": "include_referenced_terms_count",
        "include_referenced_entries_count": "include_referenced_entries_count",
        "deleted": "deleted",
        "typeahead": "typeahead"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [],
      "properties": {
        "limit": {
          "type": "string",
          "description": "Specify the number of taxonomies to retrieve from the stack. For example, if you set the limit to 10, then the first 10 taxonomies will be fetched. The maximum limit is 100."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of taxonomies to skip. For example, if you set the skip value to 3, the first three taxonomies will be skipped and the results will start with the fourth item."
        },
        "typeahead": {
          "type": "string",
          "description": "Specify a UID or name to search the taxonomies."
        },
        "include_count": {
          "type": "boolean",
          "default": false
        },
        "include_terms_count": {
          "type": "boolean",
          "default": false
        },
        "include_referenced_terms_count": {
          "type": "boolean",
          "default": false
        },
        "include_referenced_entries_count": {
          "type": "boolean",
          "default": false
        },
        "deleted": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_a_single_taxonomy": {
    "name": "get_a_single_taxonomy",
    "description": "This tool retrieves metadata and configuration details for a specified taxonomy, with optional inclusion of term, referenced term, and referenced entry counts for advanced content modeling and reporting.",
    "mapper": {
      "apiUrl": "/v3/taxonomies/taxonomy_uid",
      "method": "GET",
      "params": {
        "taxonomy_uid": "taxonomy_uid"
      },
      "queryParams": {
        "include_terms_count": "include_terms_count",
        "include_referenced_terms_count": "include_referenced_terms_count",
        "include_referenced_entries_count": "include_referenced_entries_count"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "taxonomy_uid"
      ],
      "properties": {
        "taxonomy_uid": {
          "type": "string",
          "description": "Select a taxonomy to fetch its details."
        },
        "include_terms_count": {
          "type": "boolean",
          "default": false
        },
        "include_referenced_terms_count": {
          "type": "boolean",
          "default": false
        },
        "include_referenced_entries_count": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "export_a_taxonomy": {
    "name": "export_a_taxonomy",
    "description": "This tool exports a taxonomy and all its associated terms from the specified stack in the selected format, supporting structured data extraction for taxonomy management.",
    "mapper": {
      "apiUrl": "/v3/taxonomies/taxonomy_uid/export",
      "method": "GET",
      "queryParams": {
        "format": "format"
      },
      "params": {
        "taxonomy_uid": "taxonomy_uid"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "taxonomy_uid"
      ],
      "properties": {
        "taxonomy_uid": {
          "type": "string",
          "description": "Select a taxonomy you want to export. This exports all the associated terms within the selected taxonomy."
        },
        "format": {
          "type": "string",
          "description": "Select the format in which you want to export the taxonomy.",
          "default": "json"
        }
      }
    }
  },
  "get_all_languages": {
    "name": "get_all_languages",
    "description": "This tool retrieves metadata for all languages configured within a specified stack branch, supporting pagination via limit and skip parameters. Localization, language management.",
    "mapper": {
      "apiUrl": "/v3/locales",
      "method": "GET",
      "queryParams": {
        "include_count": "include_count",
        "include_branch": "include_branch",
        "limit": "limit",
        "skip": "skip"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [],
      "properties": {
        "limit": {
          "type": "string",
          "description": "Specify the number of languages to retrieve from the stack. For example, if you set the limit to 10, then the first 10 languages will be fetched. The maximum limit is 100."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of languages to skip. For example, if you set the skip value to 3, the first three languages will be skipped and the results will start with the fourth item."
        },
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "include_count": {
          "type": "boolean",
          "default": false
        },
        "include_branch": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_all_branch_aliases": {
    "name": "get_all_branch_aliases",
    "description": "This tool retrieves metadata for all branch aliases within a specified stack, supporting pagination via limit and skip parameters. Keywords: branch aliases, stack.",
    "mapper": {
      "apiUrl": "/v3/stacks/branch_aliases",
      "method": "GET",
      "queryParams": {
        "limit": "limit",
        "skip": "skip"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [],
      "properties": {
        "limit": {
          "type": "string",
          "description": "Specify the number of branch aliases to retrieve from the stack. For example, if you set the limit to 10, then 10 branch aliases will be fetched. The maximum limit is 100."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of branch aliases to skip. For example, if you set the skip value to 3, the first three branch aliases will be skipped and the results will start with the fourth item."
        }
      }
    }
  },
  "get_all_assets": {
    "name": "get_all_assets",
    "description": "This tool retrieves metadata for all assets within a specified stack, supporting environment and branch filters, with pagination via limit and skip parameters. Keywords: asset retrieval, metadata.",
    "mapper": {
      "apiUrl": "/v3/assets",
      "method": "GET",
      "queryParams": {
        "environment": "environment",
        "limit": "limit",
        "skip": "skip",
        "folder": "folder_id",
        "include_count": "include_count",
        "include_publish_details": "include_publish_details",
        "include_metadata": "include_metadata"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [],
      "properties": {
        "environment": {
          "type": "string",
          "description": "Select an environment to fetch the asset details.",
          "default": ""
        },
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "limit": {
          "type": "string",
          "description": "Specify the number of assets to retrieve from the stack. For example, if you set the limit to 10, then 10 assets will be fetched. The maximum limit is 100."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of assets to skip. For example, if you set the skip value to 3, the first three assets will be skipped and the results will start with the fourth item."
        },
        "folder_id": {
          "type": "string",
          "description": "Select a folder to fetch the details of all the assets in that folder."
        },
        "include_count": {
          "type": "boolean",
          "default": false
        },
        "include_publish_details": {
          "type": "boolean"
        },
        "include_metadata": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_all_branches": {
    "name": "get_all_branches",
    "description": "This tool retrieves metadata for all branches within a specified stack, supporting pagination via limit and skip parameters. Keywords: branches, stack",
    "mapper": {
      "apiUrl": "/v3/stacks/branches",
      "method": "GET",
      "queryParams": {
        "limit": "limit",
        "skip": "skip"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [],
      "properties": {
        "limit": {
          "type": "string",
          "description": "Specify the number of branches to retrieve from the stack. For example, if you set the limit to 10, then the first 10 branches will be fetched. The maximum limit is 100."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of branches to skip. For example, if you set the skip value to 3, the first three branches will be skipped and the results will start with the fourth item."
        }
      }
    }
  },
  "get_all_global_fields": {
    "name": "get_all_global_fields",
    "description": "This tool retrieves metadata for all global fields configured within the specified stack, supporting optional branch selection and branch metadata inclusion.",
    "mapper": {
      "apiUrl": "/v3/global_fields",
      "method": "GET",
      "queryParams": {
        "include_branch": "include_branch"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "branch"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "include_branch": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_all_items_in_a_release": {
    "name": "get_all_items_in_a_release",
    "description": "This tool retrieves metadata and content details for all items associated with the specified release_id, optionally including branch information if include_branch is true.",
    "mapper": {
      "apiUrl": "/v3/releases/release_id/items",
      "method": "GET",
      "params": {
        "release_id": "release_id"
      },
      "queryParams": {
        "include_branch": "include_branch"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "release_id"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "release_id": {
          "type": "string",
          "description": "Select a release from which you want to fetch the item details.",
          "default": ""
        },
        "include_branch": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_all_releases": {
    "name": "get_all_releases",
    "description": "This tool retrieves metadata for all releases within a specified stack, supporting branch selection, pagination via limit and skip parameters, and optional inclusion of total and item counts. Keywords: releases, metadata",
    "mapper": {
      "apiUrl": "/v3/releases",
      "method": "GET",
      "queryParams": {
        "limit": "limit",
        "skip": "skip",
        "include_count": "include_count",
        "include_items_count": "include_items_count",
        "include_branch": "include_branch"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "branch"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "limit": {
          "type": "string",
          "description": "Specify the number of releases to retrieve from the stack. For example, if you set the limit to 10, then 10 releases will be fetched."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of releases to skip. For example, if you set the skip value to 3, the first three releases will be skipped."
        },
        "include_count": {
          "type": "boolean",
          "default": true
        },
        "include_items_count": {
          "type": "boolean",
          "default": true
        },
        "include_branch": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_all_terms": {
    "name": "get_all_terms",
    "description": "This tool retrieves all term details for a specified taxonomy from the stack, supporting pagination via limit and skip parameters. Keywords: taxonomy, terms.",
    "mapper": {
      "apiUrl": "/v3/taxonomies/taxonomy_uid/terms",
      "method": "GET",
      "params": {
        "taxonomy_uid": "taxonomy_uid"
      },
      "queryParams": {
        "limit": "limit",
        "skip": "skip",
        "include_count": "include_count",
        "include_children_count": "include_children_count",
        "include_referenced_terms_count": "include_referenced_terms_count",
        "include_referenced_entries_count": "include_referenced_entries_count",
        "deleted": "deleted",
        "include_order": "include_order",
        "depth": "depth",
        "typeahead": "typeahead"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "taxonomy_uid"
      ],
      "properties": {
        "taxonomy_uid": {
          "type": "string",
          "description": "Select a taxonomy to fetch the details of all the terms."
        },
        "limit": {
          "type": "string",
          "description": "Specify the number of terms to retrieve from the stack. For example, if you set the limit to 10, then the first 10 terms will be fetched. The maximum limit is 100."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of terms to skip. For example, if you set the skip value to 3, the first three terms will be skipped and the results will start with the fourth item."
        },
        "typeahead": {
          "type": "string",
          "description": "Specify a UID or name to search the term(s)."
        },
        "depth": {
          "type": "number",
          "description": "Specify the depth to fetch the terms from the root level. By default, the terms are fetched from the root."
        },
        "include_count": {
          "type": "boolean",
          "default": false
        },
        "include_children_count": {
          "type": "boolean",
          "default": false
        },
        "include_referenced_entries_count": {
          "type": "boolean",
          "default": false
        },
        "include_order": {
          "type": "boolean",
          "default": false
        },
        "deleted": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_all_terms_across_all_taxonomies": {
    "name": "get_all_terms_across_all_taxonomies",
    "description": "This tool retrieves term details from all taxonomies within the stack, supporting typeahead search, pagination via limit and skip, and optional total count inclusion. Keywords: taxonomy, term.",
    "mapper": {
      "apiUrl": "/v3/taxonomies/$all/terms",
      "method": "GET",
      "queryParams": {
        "limit": "limit",
        "skip": "skip",
        "include_count": "include_count",
        "include_children_count": "include_children_count",
        "include_referenced_entries_count": "include_referenced_entries_count",
        "typeahead": "typeahead"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "typeahead"
      ],
      "properties": {
        "typeahead": {
          "type": "string",
          "description": "Specify a UID or name to search the term(s)."
        },
        "limit": {
          "type": "string",
          "description": "Specify the number of terms to retrieve from the stack. For example, if you set the limit to 10, then the first 10 terms will be fetched. The maximum limit is 100."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of terms to skip. For example, if you set the skip value to 3, the first three terms will be skipped and the results will start with the fourth item."
        },
        "include_count": {
          "type": "boolean",
          "default": false
        },
        "include_children_count": {
          "type": "boolean",
          "default": false
        },
        "include_referenced_entries_count": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_all_variants_of_an_entry": {
    "name": "get_all_variants_of_an_entry",
    "description": "This tool retrieves all locale variants of a specified entry within the selected content type, enabling access to localized entry data for further processing or analysis.",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries/entry_uid/variants",
      "method": "GET",
      "params": {
        "content_type_name": "content_type_name",
        "entry_uid": "entry_uid"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name",
        "entry_uid"
      ],
      "properties": {
        "content_type_name": {
          "type": "string",
          "description": "Select a content type to fetch the details of all the variants of an entry.",
          "default": ""
        },
        "entry_uid": {
          "type": "string",
          "description": "Select an entry to fetch the details of its variants.",
          "default": ""
        }
      }
    }
  },
  "get_all_ancestors_of_a_term": {
    "name": "get_all_ancestors_of_a_term",
    "description": "This tool retrieves the complete ancestor hierarchy for a specified term within a taxonomy, supporting pagination via limit and skip parameters. Keywords: taxonomy, hierarchy.",
    "mapper": {
      "apiUrl": "/v3/taxonomies/taxonomy_uid/terms/term_uid/ancestors",
      "method": "GET",
      "params": {
        "taxonomy_uid": "taxonomy_uid",
        "term_uid": "term_uid"
      },
      "queryParams": {
        "limit": "limit",
        "skip": "skip",
        "include_count": "include_count",
        "include_referenced_entries_count": "include_referenced_entries_count",
        "include_order": "include_order"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "taxonomy_uid",
        "term_uid"
      ],
      "properties": {
        "taxonomy_uid": {
          "type": "string",
          "description": "Select a taxonomy to fetch the details of all the terms."
        },
        "term_uid": {
          "type": "string",
          "description": "Select a term to fetch its ancestors."
        },
        "limit": {
          "type": "string",
          "description": "Specify the number of terms to retrieve from the stack. For example, if you set the limit to 10, then the first 10 terms will be fetched. The maximum limit is 100."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of terms to skip. For example, if you set the skip value to 3, the first three terms will be skipped and the results will start with the fourth item."
        },
        "include_count": {
          "type": "boolean",
          "default": false
        },
        "include_children_count": {
          "type": "boolean",
          "default": false
        },
        "include_referenced_entries_count": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_a_single_asset": {
    "name": "get_a_single_asset",
    "description": "This tool retrieves metadata and properties for a specified asset within a Contentstack stack, supporting branch, environment, and version parameters for precise asset identification and retrieval. Keywords: asset, metadata",
    "mapper": {
      "apiUrl": "/v3/assets/asset_id",
      "method": "GET",
      "params": {
        "asset_id": "asset_id"
      },
      "queryParams": {
        "version": "version",
        "environment": "environment"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "asset_id"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "asset_id": {
          "type": "string",
          "description": "Select an asset to fetch its details."
        },
        "environment": {
          "type": "string",
          "description": "Select an environment to fetch the asset details."
        },
        "version": {
          "type": "string",
          "description": "Enter the asset version to fetch its details."
        }
      }
    }
  },
  "get_asset_reference": {
    "name": "get_asset_reference",
    "description": "This tool retrieves all entries referencing the specified asset within the selected branch, enabling asset dependency analysis and content relationship management.",
    "mapper": {
      "apiUrl": "/v3/assets/asset_id/references",
      "method": "GET",
      "params": {
        "asset_id": "asset_id"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "asset_id"
      ],
      "properties": {
        "asset_id": {
          "type": "string",
          "description": "Select an asset to view all entries where it is referenced."
        },
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        }
      }
    }
  },
  "get_a_single_branch": {
    "name": "get_a_single_branch",
    "description": "This tool retrieves metadata and configuration details for a specified branch within a Contentstack stack, enabling branch-level inspection and management.",
    "mapper": {
      "apiUrl": "/v3/stacks/branches/branch_id",
      "method": "GET",
      "params": {
        "branch_id": "branch_id"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "Branch_id"
      ],
      "properties": {
        "Branch_id": {
          "type": "string",
          "description": "Select a branch to fetch its details.",
          "default": ""
        }
      }
    }
  },
  "get_all_descendants_of_a_term": {
    "name": "get_all_descendants_of_a_term",
    "description": "This tool retrieves all descendant terms of a specified taxonomy term, supporting pagination via limit and skip parameters. Suitable for hierarchical taxonomy traversal and term management.",
    "mapper": {
      "apiUrl": "/v3/taxonomies/taxonomy_uid/terms/term_uid/descendants",
      "method": "GET",
      "params": {
        "taxonomy_uid": "taxonomy_uid",
        "term_uid": "term_uid"
      },
      "queryParams": {
        "limit": "limit",
        "skip": "skip",
        "include_count": "include_count",
        "include_children_count": "include_children_count",
        "include_referenced_entries_count": "include_referenced_entries_count",
        "include_order": "include_order",
        "depth": "depth"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "taxonomy_uid",
        "term_uid"
      ],
      "properties": {
        "taxonomy_uid": {
          "type": "string",
          "description": "Select a taxonomy to fetch the details of all the terms."
        },
        "term_uid": {
          "type": "string",
          "description": "Select a term to fetch its descendants."
        },
        "limit": {
          "type": "string",
          "description": "Specify the number of terms to retrieve from the stack. For example, if you set the limit to 10, then the first 10 terms will be fetched. The maximum limit is 100."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of terms to skip. For example, if you set the skip value to 3, the first three terms will be skipped and the results will start with the fourth item."
        },
        "depth": {
          "type": "number",
          "description": "Specify the depth to fetch the descendants of a term."
        },
        "include_count": {
          "type": "boolean",
          "default": false
        },
        "include_children_count": {
          "type": "boolean",
          "default": false
        },
        "include_referenced_entries_count": {
          "type": "boolean",
          "default": false
        },
        "include_order": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_a_single_release": {
    "name": "get_a_single_release",
    "description": "This tool retrieves metadata and configuration details for a specified release within a given branch, supporting optional inclusion of branch information for developer reference and audit purposes.",
    "mapper": {
      "apiUrl": "/v3/releases/release_id",
      "method": "GET",
      "params": {
        "release_id": "release_id"
      },
      "queryParams": {
        "include_branch": "include_branch"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "release_id"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "release_id": {
          "type": "string",
          "description": "Select a release to fetch its details.",
          "default": ""
        },
        "include_branch": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_a_single_branch_alias": {
    "name": "get_a_single_branch_alias",
    "description": "This tool retrieves metadata and configuration details for a specified branch alias within a Contentstack stack, enabling branch management and validation operations.",
    "mapper": {
      "apiUrl": "/v3/stacks/branch_aliases/branch_alias_id",
      "method": "GET",
      "params": {
        "branch_alias_id": "branch_alias_id"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "branch_alias_id"
      ],
      "properties": {
        "branch_alias_id": {
          "type": "string",
          "description": "Select a branch alias to fetch its details.",
          "default": ""
        }
      }
    }
  },
  "get_single_entry_variant": {
    "name": "get_single_entry_variant",
    "description": "This tool retrieves a specific variant of a content entry from a designated content type, branch, and locale, using the provided entry and variant identifiers. Suitable for variant management and localization workflows.",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries/entry_id/variants/variant_uid",
      "method": "GET",
      "params": {
        "content_type_name": "content_type_name",
        "entry_id": "entry_id",
        "variant_uid": "variant_uid"
      },
      "queryParams": {
        "locale": "locale",
        "include_publish_details": "include_publish_details",
        "include_rules": "include_rules",
        "include_workflow": "include_workflow"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name",
        "entry_id",
        "variant_uid"
      ],
      "properties": {
        "content_type_name": {
          "type": "string",
          "description": "Select a content type",
          "default": ""
        },
        "entry_id": {
          "type": "string",
          "description": "Select an entry",
          "default": ""
        },
        "variant_uid": {
          "type": "string",
          "description": "Select a variant to fetch its details."
        },
        "locale": {
          "type": "string",
          "description": "Select a locale"
        },
        "include_publish_details": {
          "type": "boolean",
          "default": false
        },
        "include_rules": {
          "type": "boolean",
          "default": false
        },
        "include_workflow": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_a_single_global_field": {
    "name": "get_a_single_global_field",
    "description": "This tool retrieves metadata and configuration details for a specified global field within a Contentstack stack, supporting branch selection and optional inclusion of branch context. Keywords: global field, metadata",
    "mapper": {
      "apiUrl": "/v3/global_fields/global_field_uid",
      "method": "GET",
      "queryParams": {
        "include_branch": "include_branch"
      },
      "params": {
        "global_field_uid": "global_field_uid"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "global_field_uid"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "global_field_uid": {
          "type": "string",
          "description": "Select a global field to fetch its details.",
          "default": ""
        },
        "include_branch": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_a_single_variant": {
    "name": "get_a_single_variant",
    "description": "This tool retrieves detailed information for a specified variant within a designated Variant Group using the provided variant_id and variant_group_uid parameters. Keywords: variant, retrieval",
    "mapper": {
      "apiUrl": "/v3/variant_groups/variant_group_uid/variants/variant_id",
      "method": "GET",
      "params": {
        "variant_group_uid": "variant_group_uid",
        "variant_id": "variant_id"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "variant_id"
      ],
      "properties": {
        "variant_group_uid": {
          "type": "string",
          "description": "Select the Variant Group from which you want to fetch the details of a single variant."
        },
        "variant_id": {
          "type": "string",
          "description": "Select a variant to fetch its details."
        }
      }
    }
  },
  "get_a_single_term": {
    "name": "get_a_single_term",
    "description": "This tool retrieves detailed metadata for a specified taxonomy term, supporting optional inclusion of child term and referenced entry counts.",
    "mapper": {
      "apiUrl": "/v3/taxonomies/taxonomy_uid/terms/term_uid",
      "method": "GET",
      "params": {
        "taxonomy_uid": "taxonomy_uid",
        "term_uid": "term_uid"
      },
      "queryParams": {
        "include_children_count": "include_children_count",
        "include_referenced_entries_count": "include_referenced_entries_count"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "taxonomy_uid",
        "term_uid"
      ],
      "properties": {
        "taxonomy_uid": {
          "type": "string",
          "description": "Select a taxonomy to fetch the details of a single term."
        },
        "term_uid": {
          "type": "string",
          "description": "Select a term to fetch its details."
        },
        "include_children_count": {
          "type": "boolean",
          "default": false
        },
        "include_referenced_entries_count": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "get_all_variants_of_a_content_type": {
    "name": "get_all_variants_of_a_content_type",
    "description": "This tool retrieves all variant definitions linked to the specified content type, enabling programmatic access to variant metadata for content modeling and management.",
    "mapper": {
      "apiUrl": "/v3/variant_groups/",
      "method": "GET",
      "queryParams": {
        "content_type": "content_type_uid",
        "include_variant_info": "include_variant_info"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_uid"
      ],
      "properties": {
        "content_type_uid": {
          "type": "string",
          "description": "Select a content type to fetch all the variants associated with it.",
          "default": ""
        }
      }
    }
  },
  "get_publish_queue": {
    "name": "get_publish_queue",
    "description": "This tool retrieves metadata and content for all entries, both published and unpublished, within a specified stack branch, supporting query filtering, pagination, and branch selection.",
    "mapper": {
      "apiUrl": "/v3/publish-queue",
      "method": "GET",
      "queryParams": {
        "limit": "limit",
        "skip": "skip",
        "include_count": "include_count"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "limit": {
          "type": "string",
          "description": "Specify the number of entries to retrieve from the stack. For example, if you set the limit to 10, then 10 entries will be fetched. The maximum limit is 100."
        },
        "skip": {
          "type": "string",
          "description": "Specify the number of entries to skip. For example, if you set the skip value to 3, the first three entries will be skipped and the results will start with the fourth item."
        },
        "include_count": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "add_items_to_a_release": {
    "name": "add_items_to_a_release",
    "description": "This tool programmatically adds specified content items to a designated release within a Contentstack stack branch by accepting structured item data in JSON format, enabling automated release management and deployment workflows.",
    "mapper": {
      "apiUrl": "/v3/releases/release_id/items",
      "method": "POST",
      "body": "item_data",
      "params": {
        "release_id": "release_id"
      },
      "queryParams": {
        "include_branch": "include_branch"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "release_id",
        "item_data"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "release_id": {
          "type": "string",
          "description": "Select a release in which you want to add the items.",
          "default": ""
        },
        "item_data": {
          "type": "string",
          "description": "Enter the data to be added in JSON format.",
          "default": "{\n        \"items\": [\n          {\n            \"uid\": \"entry_uid\",\n            \"version\": 1,\n            \"locale\": \"en-us\",\n            \"content_type_uid\": \"demo\",\n            \"action\": \"publish\"\n          },\n          {\n            \"uid\": \"asset_uid\",\n            \"version\": 1,\n            \"locale\": \"en-us\",\n            \"content_type_uid\": \"built_io_upload\",\n            \"action\": \"publish\"\n          }\n        ]\n      }\n      "
        },
        "include_branch": {
          "type": "boolean"
        }
      }
    }
  },
  "clone_a_release": {
    "name": "clone_a_release",
    "description": "This tool creates a duplicate of an existing release in the specified branch, assigning a new name and optional description to the cloned release. Release management, cloning.",
    "mapper": {
      "apiUrl": "/v3/releases/release_id/clone",
      "method": "POST",
      "body": "release",
      "params": {
        "release_id": "release_id"
      },
      "queryParams": {
        "include_branch": "include_branch"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "release_id",
        "name"
      ],
      "properties": {
        "release_id": {
          "type": "string",
          "description": "Select a release you want to clone.",
          "default": ""
        },
        "name": {
          "type": "string",
          "description": "Enter a suitable name for the cloned release.",
          "default": ""
        },
        "description": {
          "type": "string",
          "description": "Enter a suitable description for the cloned release.",
          "default": ""
        },
        "include_branch": {
          "type": "boolean"
        }
      }
    }
  },
  "localize_an_entry": {
    "name": "localize_an_entry",
    "description": "This tool localizes a specified entry within a stack by creating or updating its content for the target locale, ensuring the entry becomes independent from the fallback locale. Supports branch selection, content type, entry identification, and locale specification. Localization, entry management.",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries/entry_id",
      "method": "PUT",
      "body": "entry_data",
      "params": {
        "content_type_name": "content_type_name",
        "entry_id": "entry_id"
      },
      "queryParams": {
        "locale": "locale",
        "include_branch": "include_branch"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name",
        "entry_data",
        "entry_id",
        "locale"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "content_type_name": {
          "type": "string",
          "description": "Select a content type to localize the entry.",
          "default": ""
        },
        "entry_id": {
          "type": "string",
          "description": "Select an entry that you want to localize.",
          "default": ""
        },
        "locale": {
          "type": "string",
          "description": "Select a locale (language) in which you want to localize the entry."
        },
        "entry_data": {
          "type": "object",
          "description": "The fields should be wrapped by an entry object {'entry':{...data}}"
        },
        "include_branch": {
          "type": "boolean"
        }
      }
    }
  },
  "create_a_release": {
    "name": "create_a_release",
    "description": "This tool creates a new empty release object within the specified stack branch, initializing it with a required name and optional description; supports branch selection and inclusion parameters for release management.",
    "mapper": {
      "apiUrl": "/v3/releases",
      "method": "POST",
      "body": "release",
      "queryParams": {
        "include_branch": "include_branch"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Enter a suitable name for the release."
        },
        "description": {
          "type": "string",
          "description": "Enter a suitable description for the release."
        },
        "include_branch": {
          "type": "boolean"
        }
      }
    }
  },
  "create_a_taxonomy": {
    "name": "create_a_taxonomy",
    "description": "This tool creates a new taxonomy object within the specified stack, assigning the provided UID, name, and optional description for structured content classification. Keywords: taxonomy, stack",
    "mapper": {
      "apiUrl": "/v3/taxonomies",
      "method": "POST",
      "body": "taxonomy"
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "uid",
        "name"
      ],
      "properties": {
        "uid": {
          "type": "string",
          "description": "Specify a UID to create a taxonomy."
        },
        "name": {
          "type": "string",
          "description": "Specify a title for the taxonomy."
        },
        "description": {
          "type": "string",
          "description": "Specify a description for the taxonomy."
        }
      }
    }
  },
  "create_a_term": {
    "name": "create_a_term",
    "description": "This tool creates a new term within a specified taxonomy by assigning a unique identifier, name, order, and optional parent term. Taxonomy, term creation.",
    "mapper": {
      "apiUrl": "/v3/taxonomies/taxonomy_uid/terms",
      "method": "POST",
      "params": {
        "taxonomy_uid": "taxonomy_uid"
      },
      "body": "term"
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "taxonomy_uid",
        "uid",
        "name",
        "order"
      ],
      "properties": {
        "taxonomy_uid": {
          "type": "string",
          "description": "Select a taxonomy to create a term."
        },
        "uid": {
          "type": "string",
          "description": "Specify a UID to create a term."
        },
        "name": {
          "type": "string",
          "description": "Specify a title for the term. It must contain only alphanumeric values and underscores."
        },
        "order": {
          "type": "number",
          "description": "Specify the placement order of your term."
        },
        "parent_uid": {
          "type": "string",
          "description": "Select the parent to create a term, if this itself is root level then parent_uid is null."
        }
      }
    }
  },
  "delete_an_asset": {
    "name": "delete_an_asset",
    "description": "This tool permanently deletes the specified asset from the selected branch within the stack. Asset management, deletion",
    "mapper": {
      "apiUrl": "/v3/assets/asset_id",
      "method": "DELETE",
      "params": {
        "asset_id": "asset_id"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "asset_id"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "asset_id": {
          "type": "string",
          "description": "Select an asset to delete."
        }
      }
    }
  },
  "delete_a_taxonomy": {
    "name": "delete_a_taxonomy",
    "description": "This tool deletes the specified taxonomy and all associated terms from the stack.",
    "mapper": {
      "apiUrl": "/v3/taxonomies/taxonomy_uid",
      "method": "DELETE",
      "params": {
        "taxonomy_uid": "taxonomy_uid"
      },
      "queryParams": {
        "force": "force"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "taxonomy_uid",
        "force"
      ],
      "properties": {
        "taxonomy_uid": {
          "type": "string",
          "description": "Select a taxonomy to delete. This deletes all the associated terms within the selected taxonomy."
        },
        "force": {
          "type": "boolean",
          "default": true
        }
      }
    }
  },
  "delete_a_term": {
    "name": "delete_a_term",
    "description": "This tool deletes a specified term from a taxonomy using the provided taxonomy_uid and term_uid parameters; supports forced deletion via the force flag. Keywords: taxonomy, term deletion.",
    "mapper": {
      "apiUrl": "/v3/taxonomies/taxonomy_uid/terms/term_uid",
      "method": "DELETE",
      "params": {
        "taxonomy_uid": "taxonomy_uid",
        "term_uid": "term_uid"
      },
      "queryParams": {
        "force": "force"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "taxonomy_uid",
        "term_uid",
        "force"
      ],
      "properties": {
        "taxonomy_uid": {
          "type": "string",
          "description": "Select a taxonomy to delete a term."
        },
        "term_uid": {
          "type": "string",
          "description": "Select a term to delete."
        },
        "force": {
          "type": "boolean",
          "default": true
        }
      }
    }
  },
  "get_all_environments": {
    "name": "get_all_environments",
    "description": "This tool fetches the list of environments in a stack with optional total-count reporting and ascending/descending sorting by any environment field. Keywords: environment list, metadata, sorting, count.",
    "mapper": {
      "apiUrl": "/v3/environments",
      "method": "GET",
      "queryParams": {
        "include_count": "include_count",
        "asc": "asc",
        "desc": "desc"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "include_count"
      ],
      "properties": {
        "include_count": {
          "type": "boolean",
          "description": "Set to true to include the total number of environments in the response.",
          "default": false
        },
        "asc": {
          "type": "string",
          "description": "Unique field UID to sort environments in ascending order (e.g., \"created_at\")."
        },
        "desc": {
          "type": "string",
          "description": "Unique field UID to sort environments in descending order (e.g., \"updated_at\")."
        }
      }
    }
  },
  "create_an_environment": {
    "name": "create_an_environment",
    "description": "This tool creates a new environment in the stack by specifying its name and one or more locale-specific base URLs.",
    "mapper": {
      "apiUrl": "/v3/environments",
      "method": "POST",
      "body": "environment"
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "name",
        "urls"
      ],
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[a-z0-9_-]+$",
          "description": "Lower-case letters, digits, hyphens, or underscores only—no spaces or other symbols. Example: \"dummy_environment\"."
        },
        "urls": {
          "type": "array",
          "description": "Array of objects, each mapping a locale to its base URL. Example: [{\"locale\":\"en-us\",\"url\":\"https://example.com/\"}].",
          "items": {
            "type": "object",
            "required": [
              "locale",
              "url"
            ],
            "properties": {
              "locale": {
                "type": "string",
                "description": "Locale code (e.g., \"en-us\")."
              },
              "url": {
                "type": "string",
                "format": "uri",
                "description": "Base URL for the locale (e.g., \"https://example.com/\")."
              }
            }
          }
        }
      }
    }
  },
  "get_an_environment": {
    "name": "get_an_environment",
    "description": "This tool retrieves full details for a single environment, identified by its name",
    "mapper": {
      "apiUrl": "/v3/environments/environment_name",
      "method": "GET",
      "params": {
        "environment_name": "environment_name"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "environment_name"
      ],
      "properties": {
        "environment_name": {
          "type": "string",
          "pattern": "^[a-z0-9_-]+$",
          "description": "Exact name of the environment to fetch (lower-case letters, digits, hyphens, or underscores only)."
        }
      }
    }
  },
  "update_an_environment": {
    "name": "update_an_environment",
    "description": "This tool updates an existing environment, identified by its name in the URL path. You can change the environment’s name and/or its locale-to-URL mappings.",
    "mapper": {
      "apiUrl": "/v3/environments/environment_name",
      "method": "PUT",
      "params": {
        "environment_name": "environment_name"
      },
      "body": "environment"
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "environment_name"
      ],
      "properties": {
        "environment_name": {
          "type": "string",
          "pattern": "^[a-z0-9_-]+$",
          "description": "Current name of the environment (lower-case letters, digits, hyphens, or underscores only)."
        },
        "name": {
          "type": "string",
          "pattern": "^[a-z0-9_-]+$",
          "description": "New name for the environment (same character rules). Optional; omit if you’re not renaming."
        },
        "urls": {
          "type": "array",
          "description": "Array of objects mapping locales to base URLs. Example: [{\"locale\":\"en-us\",\"url\":\"https://example.com/\"}]. Optional; include only if you’re updating URLs.",
          "items": {
            "type": "object",
            "required": [
              "locale",
              "url"
            ],
            "properties": {
              "locale": {
                "type": "string",
                "description": "Locale code (e.g., \"en-us\")."
              },
              "url": {
                "type": "string",
                "format": "uri",
                "description": "Base URL for that locale."
              }
            }
          }
        }
      }
    }
  },
  "delete_an_environment": {
    "name": "delete_an_environment",
    "description": "This tool permanently deletes an environment, identified by its name.",
    "mapper": {
      "apiUrl": "/v3/environments/environment_name",
      "method": "DELETE",
      "params": {
        "environment_name": "environment_name"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "environment_name"
      ],
      "properties": {
        "environment_name": {
          "type": "string",
          "pattern": "^[a-z0-9_-]+$",
          "description": "Exact name of the environment to delete (lower-case letters, digits, hyphens, or underscores only)."
        }
      }
    }
  },
  "deploy_a_release": {
    "name": "deploy_a_release",
    "description": "This tool deploys a specified release to one or more target environments within a Contentstack stack, supporting branch selection and optional scheduling for automated release publishing. Keywords: release deployment, environment.",
    "mapper": {
      "apiUrl": "/v3/releases/release_id/deploy",
      "method": "POST",
      "body": "release",
      "params": {
        "release_id": "release_id"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "release_id",
        "environments"
      ],
      "properties": {
        "release_id": {
          "type": "string",
          "description": "Select a release you want to deploy.",
          "default": ""
        },
        "environments": {
          "type": "array",
          "description": "Select the environment(s) in which you want to perform the release deploy action.",
          "default": [
            "env1",
            "env2"
          ],
          "items": {
            "type": "string",
            "description": "An environment name."
          }
        },
        "scheduled_at": {
          "type": "string",
          "description": "Schedule the release publish in “YYYY-MM-DD HH:MM:SS” format.",
          "default": "YYYY-MM-DDThh:mm:ss.sssZ"
        }
      }
    }
  },
  "get_a_single_merge_job": {
    "name": "get_a_single_merge_job",
    "description": "This tool retrieves detailed information for a specified merge job within a stack, using the provided merge_job_uid parameter. Keywords: merge job, stack.",
    "mapper": {
      "apiUrl": "/v3/stacks/branches_queue/merge_job_uid",
      "method": "GET",
      "params": {
        "merge_job_uid": "merge_job_uid"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "merge_job_uid"
      ],
      "properties": {
        "merge_job_uid": {
          "type": "string",
          "description": "Select a merge job to fetch its details.",
          "default": ""
        }
      }
    }
  },
  "merge_branch": {
    "name": "merge_branch",
    "description": "this tool merges content types and global fields from a compare branch into a base branch, with optional per item strategy overrides.",
    "mapper": {
      "apiUrl": "/v3/stacks/branches_merge",
      "method": "POST",
      "body": {
        "title": "merging_data",
        "type": "object",
        "optional": true,
        "properties": {
          "item_merge_strategies": {
            "type": "array",
            "x-mapFrom": "item_merge_strategies",
            "optional": true,
            "items": {
              "type": "object",
              "required": [
                "uid",
                "type",
                "merge_strategy"
              ],
              "properties": {
                "uid": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "content_type",
                    "global_field"
                  ]
                },
                "merge_strategy": {
                  "type": "string",
                  "enum": [
                    "merge_prefer_base",
                    "merge_prefer_compare",
                    "overwrite_with_compare",
                    "merge_new_only",
                    "merge_modified_only_prefer_base",
                    "merge_modified_only_prefer_compare"
                  ]
                }
              },
              "additionalProperties": false
            },
            "minItems": 1
          }
        },
        "additionalProperties": false
      },
      "type": "complex",
      "queryParams": {
        "base_branch": "base_branch",
        "compare_branch": "compare_branch",
        "default_merge_strategy": "merge_strategy",
        "merge_comment": "merge_comment"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "base_branch",
        "compare_branch",
        "merge_strategy",
        "merge_comment"
      ],
      "properties": {
        "compare_branch": {
          "type": "string"
        },
        "base_branch": {
          "type": "string",
          "default": "main"
        },
        "merge_strategy": {
          "type": "string",
          "enum": [
            "merge_prefer_base",
            "merge_prefer_compare",
            "overwrite_with_compare",
            "merge_new_only",
            "merge_modified_only_prefer_base",
            "merge_modified_only_prefer_compare",
            "ignore"
          ],
          "default": "ignore"
        },
        "merge_comment": {
          "type": "string"
        },
        "item_merge_strategies": {
          "type": "array",
          "description": "Optional per item strategy overrides. Provide only if the user specifies them.",
          "optional": true,
          "items": {
            "type": "object",
            "required": [
              "uid",
              "type",
              "merge_strategy"
            ],
            "properties": {
              "uid": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "content_type",
                  "global_field"
                ]
              },
              "merge_strategy": {
                "type": "string",
                "enum": [
                  "merge_prefer_base",
                  "merge_prefer_compare",
                  "overwrite_with_compare",
                  "merge_new_only",
                  "merge_modified_only_prefer_base",
                  "merge_modified_only_prefer_compare"
                ]
              }
            },
            "additionalProperties": false
          },
          "minItems": 1
        }
      },
      "additionalProperties": false
    }
  },
  "update_a_taxonomy": {
    "name": "update_a_taxonomy",
    "description": "This tool updates the name and description fields of a specified taxonomy entity using its unique identifier. Keywords: taxonomy, update",
    "mapper": {
      "apiUrl": "/v3/taxonomies/taxonomy_uid",
      "method": "PUT",
      "body": "taxonomy",
      "params": {
        "taxonomy_uid": "taxonomy_uid"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "taxonomy_uid",
        "name",
        "description"
      ],
      "properties": {
        "taxonomy_uid": {
          "type": "string",
          "description": "Select a taxonomy to update."
        },
        "name": {
          "type": "string",
          "description": "Specify a title for the taxonomy."
        },
        "description": {
          "type": "string",
          "description": "Specify a description for the taxonomy."
        }
      }
    }
  },
  "update_a_term": {
    "name": "update_a_term",
    "description": "This tool updates the name property of a specified term within a taxonomy using the provided taxonomy_uid and term_uid identifiers.",
    "mapper": {
      "apiUrl": "/v3/taxonomies/taxonomy_uid/terms/term_uid",
      "method": "PUT",
      "body": "term",
      "params": {
        "taxonomy_uid": "taxonomy_uid",
        "term_uid": "term_uid"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "taxonomy_uid",
        "term_uid",
        "name"
      ],
      "properties": {
        "taxonomy_uid": {
          "type": "string",
          "description": "Select a taxonomy to update the term."
        },
        "term_uid": {
          "type": "string",
          "description": "Select a term to update."
        },
        "name": {
          "type": "string",
          "description": "Specify a title to update the term."
        }
      }
    }
  },
  "delete_items_from_a_release": {
    "name": "delete_items_from_a_release",
    "description": "This tool programmatically removes specified content items from a designated release within a Contentstack stack branch, requiring the release identifier and item data in JSON format for precise targeting and execution.",
    "mapper": {
      "apiUrl": "/v3/releases/release_id/items",
      "method": "DELETE",
      "body": "item_data",
      "queryParams": {
        "include_branch": "include_branch",
        "all": "all"
      },
      "params": {
        "release_id": "release_id"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "release_id",
        "item_data"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "release_id": {
          "type": "string",
          "description": "Select a release from which you want to remove an item.",
          "default": ""
        },
        "item_data": {
          "type": "string",
          "description": "Enter the item data in JSON format.",
          "default": "{\n        \"items\": [\n          {\n            \"uid\": \"entry_uid\",\n            \"version\": 1,\n            \"locale\": \"en-us\",\n            \"content_type_uid\": \"demo\",\n            \"action\": \"publish\"\n          },\n          {\n            \"uid\": \"asset_uid\",\n            \"version\": 1,\n            \"locale\": \"en-us\",\n            \"content_type_uid\": \"built_io_upload\",\n            \"action\": \"publish\"\n          }\n        ]\n      }"
        },
        "include_branch": {
          "type": "boolean"
        },
        "all": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "publish_an_asset": {
    "name": "publish_an_asset",
    "description": "This tool publishes a specified asset from a selected branch to one or more environments and locales within a stack, with optional scheduling for future deployment. Keywords: asset publishing, environment.",
    "mapper": {
      "apiUrl": "/v3/assets/asset_uid/publish",
      "method": "POST",
      "body": {
        "type": "object",
        "properties": {
          "asset": {
            "type": "object",
            "properties": {
              "locales": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-mapFrom": "locales"
              },
              "environments": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-mapFrom": "environments"
              }
            }
          },
          "version": {
            "type": "number",
            "x-mapFrom": "version",
            "optional": true
          },
          "scheduled_at": {
            "type": "string",
            "format": "YYYY-MM-DDThh:mm:ss.sssZ",
            "x-mapFrom": "scheduled_at",
            "optional": true
          }
        }
      },
      "type": "complex",
      "params": {
        "asset_uid": "asset_uid"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "asset_uid",
        "environments",
        "locales"
      ],
      "properties": {
        "asset_uid": {
          "type": "string",
          "description": "the asset uid which you want to publish.",
          "default": ""
        },
        "environments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The environment(s) in which you want to publish the asset.",
          "default": []
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The locale(s) in which you want to publish the asset."
        },
        "scheduled_at": {
          "type": "string",
          "description": "Schedule the asset publish in 'YYYY-MM-DD HH:MM:SS' format."
        }
      }
    }
  },
  "unpublish_an_asset": {
    "name": "unpublish_an_asset",
    "description": "This tool unpublishes a specified asset from selected environments and locales within a given branch, with optional scheduling for deferred execution.",
    "mapper": {
      "apiUrl": "/v3/assets/asset_uid/unpublish",
      "method": "POST",
      "body": {
        "type": "object",
        "properties": {
          "asset": {
            "type": "object",
            "properties": {
              "locales": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-mapFrom": "locales"
              },
              "environments": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-mapFrom": "environments"
              }
            }
          },
          "version": {
            "type": "number",
            "x-mapFrom": "version",
            "optional": true
          },
          "scheduled_at": {
            "type": "string",
            "format": "YYYY-MM-DDThh:mm:ss.sssZ",
            "x-mapFrom": "scheduled_at",
            "optional": true
          }
        }
      },
      "type": "complex",
      "params": {
        "asset_uid": "asset_uid"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "asset_uid",
        "environments",
        "locales"
      ],
      "properties": {
        "asset_uid": {
          "type": "string",
          "description": "the asset uid which you want to publish.",
          "default": ""
        },
        "environments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The environment(s) in which you want to publish the asset.",
          "default": []
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The locale(s) in which you want to publish the asset."
        },
        "scheduled_at": {
          "type": "string",
          "description": "Schedule the asset publish in 'YYYY-MM-DD HH:MM:SS' format."
        }
      }
    }
  },
  "unlocalize_an_entry": {
    "name": "unlocalize_an_entry",
    "description": "This tool unlocalize a specified entry in a given locale, restoring the entry to its original non-localized state within the selected branch and content type.",
    "mapper": {
      "apiUrl": "/v3/content_types/content_type_name/entries/entry_id/unlocalize",
      "method": "POST",
      "queryParams": {
        "locale": "locale"
      },
      "params": {
        "content_type_name": "content_type_name",
        "entry_id": "entry_id"
      }
    },
    "inputSchema": {
      "type": "object",
      "required": [
        "content_type_name",
        "entry_id",
        "locale"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "description": "Select a branch from your stack.",
          "default": "main"
        },
        "content_type_name": {
          "type": "string",
          "description": "Select a content type to remove the localized version of the entry.",
          "default": ""
        },
        "entry_id": {
          "type": "string",
          "description": "Select an entry to restore to its original non-localized state.",
          "default": ""
        },
        "locale": {
          "type": "string",
          "description": "Select a locale (language) to remove the entry's localization in the selected locale. The entry must be localized in the selected locale."
        }
      }
    }
  }
}